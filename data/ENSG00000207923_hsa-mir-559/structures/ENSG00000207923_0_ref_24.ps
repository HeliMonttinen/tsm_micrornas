%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Nov  6 23:08:50 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAAACAUGCCAGUCUUCUUACCCUGGAAAACCUCUCUCUGUGAUUGCUUUUGGCACAUAUUUACUUUAGGAUGCUACUSUAGCUCCCAUCUUCUCUGGUUUAAGGAACUAGUCCUUAACCAGUUAGCCCUUCCUUAAC\
) } def
/len { sequence length } bind def

/coor [
[100.00000000 100.00000000]
[125.00000000 100.00000000]
[150.00000000 100.00000000]
[175.00000000 100.00000000]
[200.00000000 100.00000000]
[225.00000000 100.00000000]
[250.00000000 100.00000000]
[275.00000000 100.00000000]
[300.00000000 100.00000000]
[325.00000000 100.00000000]
[325.00000000 125.00000000]
[325.00000000 150.00000000]
[325.00000000 175.00000000]
[325.00000000 200.00000000]
[325.00000000 225.00000000]
[302.80746460 236.51048279]
[286.79556274 255.70993042]
[279.45751953 279.60873413]
[281.93600464 304.48559570]
[293.84509277 326.46679688]
[313.33032227 342.12966919]
[308.39776611 366.63821411]
[303.46520996 391.14678955]
[298.53265381 415.65536499]
[275.94598389 426.37179565]
[261.89544678 447.04986572]
[260.25003052 471.99563599]
[271.46279907 494.34008789]
[260.27264404 516.69586182]
[249.08248901 539.05163574]
[228.01100159 552.50494385]
[224.05615234 577.19018555]
[239.87013245 596.55297852]
[264.84783936 597.60839844]
[282.23889160 579.64868164]
[280.38055420 554.71783447]
[291.57070923 532.36206055]
[302.76086426 510.00631714]
[327.36798096 505.59146118]
[346.35165405 489.32431030]
[354.48455811 465.68420410]
[349.52719116 441.18063354]
[332.84466553 422.56094360]
[337.77722168 398.05236816]
[342.70977783 373.54379272]
[347.64233398 349.03521729]
[371.66967773 342.12966919]
[391.15490723 326.46679688]
[403.06399536 304.48559570]
[405.54248047 279.60873413]
[398.20443726 255.70993042]
[382.19253540 236.51048279]
[360.00000000 225.00000000]
[360.00000000 200.00000000]
[360.00000000 175.00000000]
[360.00000000 150.00000000]
[360.00000000 125.00000000]
[360.00000000 100.00000000]
[385.00000000 100.00000000]
[410.00000000 100.00000000]
[435.00000000 100.00000000]
[460.00000000 100.00000000]
[485.00000000 100.00000000]
[510.00000000 100.00000000]
[535.00000000 100.00000000]
[560.00000000 100.00000000]
[585.00000000 100.00000000]
[610.00000000 100.00000000]
[635.00000000 100.00000000]
[660.00000000 100.00000000]
[685.00000000 100.00000000]
[710.00000000 100.00000000]
[710.00000000 125.00000000]
[710.00000000 150.00000000]
[688.34936523 162.50000000]
[710.00000000 175.00000000]
[710.00000000 200.00000000]
[710.00000000 225.00000000]
[710.00000000 250.00000000]
[706.46459961 274.74874878]
[727.50000000 288.25842285]
[748.53540039 274.74874878]
[745.00000000 250.00000000]
[745.00000000 225.00000000]
[745.00000000 200.00000000]
[745.00000000 175.00000000]
[745.00000000 150.00000000]
[745.00000000 125.00000000]
[745.00000000 100.00000000]
[770.00000000 100.00000000]
[795.00000000 100.00000000]
[820.00000000 100.00000000]
[845.00000000 100.00000000]
[870.00000000 100.00000000]
[895.00000000 100.00000000]
[920.00000000 100.00000000]
[945.00000000 100.00000000]
[970.00000000 100.00000000]
[970.00000000 125.00000000]
[970.00000000 150.00000000]
[970.00000000 175.00000000]
[970.00000000 200.00000000]
[970.00000000 225.00000000]
[948.34936523 237.50000000]
[970.00000000 250.00000000]
[970.00000000 275.00000000]
[970.00000000 300.00000000]
[970.00000000 325.00000000]
[970.00000000 350.00000000]
[957.17901611 371.46212769]
[964.69177246 395.30661011]
[987.50000000 405.54299927]
[1010.30822754 395.30661011]
[1017.82098389 371.46212769]
[1005.00000000 350.00000000]
[1005.00000000 325.00000000]
[1005.00000000 300.00000000]
[1005.00000000 275.00000000]
[1005.00000000 250.00000000]
[1005.00000000 225.00000000]
[1005.00000000 200.00000000]
[1005.00000000 175.00000000]
[1005.00000000 150.00000000]
[1005.00000000 125.00000000]
[1005.00000000 100.00000000]
[1030.00000000 100.00000000]
[1055.00000000 100.00000000]
[1080.00000000 100.00000000]
[1105.00000000 100.00000000]
[1130.00000000 100.00000000]
[1155.00000000 100.00000000]
[1180.00000000 100.00000000]
[1205.00000000 100.00000000]
[1230.00000000 100.00000000]
[1255.00000000 100.00000000]
[1280.00000000 100.00000000]
[1305.00000000 100.00000000]
[1330.00000000 100.00000000]
[1355.00000000 100.00000000]
[1380.00000000 100.00000000]
[1405.00000000 100.00000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[342.50000000 285.88968475 63.35458712 253.96508423 231.20659677 1.00000000]
[342.50000000 285.88968475 63.35458712 231.20659677 208.44810932 1.00000000]
[342.50000000 285.88968475 63.35458712 208.44810932 185.68962186 1.00000000]
[342.50000000 285.88968475 63.35458712 185.68962186 162.93113441 1.00000000]
[342.50000000 285.88968475 63.35458712 162.93113441 140.17264695 1.00000000]
[342.50000000 285.88968475 63.35458712 140.17264695 117.41415950 1.00000000]
[]
[]
[]
[306.94591995 462.54854476 47.64193249 259.82860053 229.40666417 1.00000000]
[306.94591995 462.54854476 47.64193249 229.40666417 198.98472782 1.00000000]
[306.94591995 462.54854476 47.64193249 198.98472782 168.56279146 1.00000000]
[306.94591995 462.54854476 47.64193249 168.56279146 138.14085511 1.00000000]
[]
[]
[253.53482057 569.25357233 30.52836670 261.61392600 213.27268797 1.00000000]
[253.53482057 569.25357233 30.52836670 213.27268797 164.93144994 1.00000000]
[253.53482057 569.25357233 30.52836670 164.93144994 116.59021190 1.00000000]
[253.53482057 569.25357233 30.52836670 116.59021190 68.24897387 1.00000000]
[253.53482057 569.25357233 30.52836670 68.24897387 19.90773584 1.00000000]
[253.53482057 569.25357233 30.52836670 19.90773584 331.56649781 1.00000000]
[]
[]
[306.94591995 462.54854476 47.64193249 95.03956870 64.61763235 1.00000000]
[306.94591995 462.54854476 47.64193249 64.61763235 34.19569599 1.00000000]
[306.94591995 462.54854476 47.64193249 34.19569599 3.77375964 1.00000000]
[306.94591995 462.54854476 47.64193249 3.77375964 333.35182328 1.00000000]
[306.94591995 462.54854476 47.64193249 333.35182328 302.92988693 1.00000000]
[]
[]
[]
[342.50000000 285.88968475 63.35458712 85.34432795 62.58584050 1.00000000]
[342.50000000 285.88968475 63.35458712 62.58584050 39.82735305 1.00000000]
[342.50000000 285.88968475 63.35458712 39.82735305 17.06886559 1.00000000]
[342.50000000 285.88968475 63.35458712 17.06886559 354.31037814 1.00000000]
[342.50000000 285.88968475 63.35458712 354.31037814 331.55189068 1.00000000]
[342.50000000 285.88968475 63.35458712 331.55189068 308.79340323 1.00000000]
[342.50000000 285.88968475 63.35458712 308.79340323 286.03491577 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[727.50000000 265.12681945 23.13159456 220.83979705 155.41989853 1.00000000]
[727.50000000 265.12681945 23.13159456 155.41989853 90.00000000 1.00000000]
[727.50000000 265.12681945 23.13159456 90.00000000 24.58010147 1.00000000]
[727.50000000 265.12681945 23.13159456 24.58010147 319.16020295 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[987.50000000 375.01461919 30.52836670 235.02371410 186.68247606 1.00000000]
[987.50000000 375.01461919 30.52836670 186.68247606 138.34123803 1.00000000]
[987.50000000 375.01461919 30.52836670 138.34123803 90.00000000 1.00000000]
[987.50000000 375.01461919 30.52836670 90.00000000 41.65876197 1.00000000]
[987.50000000 375.01461919 30.52836670 41.65876197 353.31752394 1.00000000]
[987.50000000 375.01461919 30.52836670 353.31752394 304.97628590 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 58]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[21 46]
[22 45]
[23 44]
[24 43]
[28 38]
[29 37]
[30 36]
[72 89]
[73 88]
[74 87]
[76 86]
[77 85]
[78 84]
[79 83]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% Start Annotations
46 45 12 1.00 0.60 0.67 omark 51 88 12 0.72 0.69 0.47 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
