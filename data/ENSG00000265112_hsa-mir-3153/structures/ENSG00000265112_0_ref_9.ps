%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Nov  6 23:08:53 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CYUGAWGYGAUGKACUAGAACGUAGUWCCUWMGUYAGUAAAAUUAGCAAAUGGGAUUGUGGGAAGGGACAWUUAAAAUUAAYUGKCCUUAUUGUAUGCGGGASACUSAYUURGGGUGUGGCUUCAAAGACCA\
) } def
/len { sequence length } bind def

/coor [
[100.00000000 100.00000000]
[125.00000000 100.00000000]
[150.00000000 100.00000000]
[175.00000000 100.00000000]
[200.00000000 100.00000000]
[225.00000000 100.00000000]
[250.00000000 100.00000000]
[275.00000000 100.00000000]
[300.00000000 100.00000000]
[325.00000000 100.00000000]
[350.00000000 100.00000000]
[375.00000000 100.00000000]
[400.00000000 100.00000000]
[425.00000000 100.00000000]
[425.00000000 125.00000000]
[425.00000000 150.00000000]
[425.00000000 175.00000000]
[412.17904663 196.46212769]
[419.69174194 220.30661011]
[442.50000000 230.54298401]
[465.30825806 220.30661011]
[472.82095337 196.46212769]
[460.00000000 175.00000000]
[460.00000000 150.00000000]
[460.00000000 125.00000000]
[460.00000000 100.00000000]
[485.00000000 100.00000000]
[510.00000000 100.00000000]
[535.00000000 100.00000000]
[560.00000000 100.00000000]
[585.00000000 100.00000000]
[610.00000000 100.00000000]
[635.00000000 100.00000000]
[660.00000000 100.00000000]
[685.00000000 100.00000000]
[710.00000000 100.00000000]
[735.00000000 100.00000000]
[760.00000000 100.00000000]
[785.00000000 100.00000000]
[810.00000000 100.00000000]
[835.00000000 100.00000000]
[860.00000000 100.00000000]
[885.00000000 100.00000000]
[910.00000000 100.00000000]
[935.00000000 100.00000000]
[960.00000000 100.00000000]
[985.00000000 100.00000000]
[1010.00000000 100.00000000]
[1035.00000000 100.00000000]
[1060.00000000 100.00000000]
[1085.00000000 100.00000000]
[1110.00000000 100.00000000]
[1135.00000000 100.00000000]
[1160.00000000 100.00000000]
[1185.00000000 100.00000000]
[1210.00000000 100.00000000]
[1235.00000000 100.00000000]
[1260.00000000 100.00000000]
[1260.00000000 125.00000000]
[1260.00000000 150.00000000]
[1249.02539062 172.46234131]
[1260.00000000 194.92468262]
[1260.00000000 219.92468262]
[1260.00000000 244.92468262]
[1260.00000000 269.92468262]
[1260.00000000 294.92468262]
[1260.00000000 319.92468262]
[1249.02539062 342.38702393]
[1260.00000000 364.84936523]
[1260.00000000 389.84936523]
[1249.02539062 412.31170654]
[1260.00000000 434.77404785]
[1260.00000000 459.77404785]
[1260.00000000 484.77404785]
[1250.90148926 508.05957031]
[1265.00000000 528.70495605]
[1290.00000000 528.70495605]
[1304.09851074 508.05957031]
[1295.00000000 484.77404785]
[1295.00000000 459.77404785]
[1295.00000000 434.77404785]
[1305.97460938 412.31170654]
[1295.00000000 389.84936523]
[1295.00000000 364.84936523]
[1305.97460938 342.38702393]
[1295.00000000 319.92468262]
[1295.00000000 294.92468262]
[1295.00000000 269.92468262]
[1295.00000000 244.92468262]
[1316.65063477 232.42468262]
[1295.00000000 219.92468262]
[1295.00000000 194.92468262]
[1305.97460938 172.46234131]
[1295.00000000 150.00000000]
[1295.00000000 125.00000000]
[1295.00000000 100.00000000]
[1320.00000000 100.00000000]
[1345.00000000 100.00000000]
[1370.00000000 100.00000000]
[1395.00000000 100.00000000]
[1420.00000000 100.00000000]
[1445.00000000 100.00000000]
[1470.00000000 100.00000000]
[1495.00000000 100.00000000]
[1520.00000000 100.00000000]
[1545.00000000 100.00000000]
[1570.00000000 100.00000000]
[1595.00000000 100.00000000]
[1620.00000000 100.00000000]
[1645.00000000 100.00000000]
[1670.00000000 100.00000000]
[1695.00000000 100.00000000]
[1720.00000000 100.00000000]
[1745.00000000 100.00000000]
[1745.00000000 125.00000000]
[1745.00000000 150.00000000]
[1734.02539062 172.46234131]
[1745.00000000 194.92468262]
[1726.37219238 211.59819031]
[1720.48242188 235.89448547]
[1729.40722656 259.24716187]
[1750.00000000 273.42248535]
[1775.00000000 273.42248535]
[1795.59277344 259.24716187]
[1804.51757812 235.89448547]
[1798.62780762 211.59819031]
[1780.00000000 194.92468262]
[1790.97460938 172.46234131]
[1780.00000000 150.00000000]
[1780.00000000 125.00000000]
[1780.00000000 100.00000000]
[1805.00000000 100.00000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[442.50000000 200.01461919 30.52836670 235.02371410 186.68247606 1.00000000]
[442.50000000 200.01461919 30.52836670 186.68247606 138.34123803 1.00000000]
[442.50000000 200.01461919 30.52836670 138.34123803 90.00000000 1.00000000]
[442.50000000 200.01461919 30.52836670 90.00000000 41.65876197 1.00000000]
[442.50000000 200.01461919 30.52836670 41.65876197 353.31752394 1.00000000]
[442.50000000 200.01461919 30.52836670 353.31752394 304.97628590 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[1277.49999952 172.46233916 28.47466715 232.07849221 180.00000000 1.00000000]
[1277.49999952 172.46233916 28.47466715 180.00000000 127.92150791 1.00000000]
[]
[]
[]
[]
[]
[1277.49999924 342.38701754 28.47466673 232.07849309 180.00000000 1.00000000]
[1277.49999924 342.38701754 28.47466673 180.00000000 127.92150745 1.00000000]
[]
[1277.49999992 412.31169544 28.47466729 232.07849181 180.00000000 1.00000000]
[1277.49999992 412.31169544 28.47466729 180.00000000 127.92150796 1.00000000]
[]
[]
[1277.50000015 505.03227214 26.77024824 229.17803285 173.50681965 1.00000000]
[1277.50000015 505.03227214 26.77024824 173.50681965 117.83560646 1.00000000]
[1277.50000015 505.03227214 26.77024824 117.83560646 62.16439326 1.00000000]
[1277.50000015 505.03227214 26.77024824 62.16439326 6.49318006 1.00000000]
[1277.50000015 505.03227214 26.77024824 6.49318006 310.82196686 1.00000000]
[]
[]
[1277.49999992 412.31169544 28.47466729 52.07849176 360.00000000 1.00000000]
[1277.49999992 412.31169544 28.47466729 360.00000000 307.92150800 1.00000000]
[]
[1277.49999924 342.38701754 28.47466673 52.07849057 360.00000000 1.00000000]
[1277.49999924 342.38701754 28.47466673 360.00000000 307.92150861 1.00000000]
[]
[]
[]
[]
[]
[]
[1277.49999952 172.46233916 28.47466715 52.07849154 360.00000000 1.00000000]
[1277.49999952 172.46233916 28.47466715 360.00000000 307.92150824 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[1762.49999918 172.46233926 28.47466715 232.07849234 180.00000000 1.00000000]
[1762.49999918 172.46233926 28.47466715 180.00000000 127.92150791 1.00000000]
[1762.49999937 233.21813489 42.10271758 245.43973501 210.89757171 1.00000000]
[1762.49999937 233.21813489 42.10271758 210.89757171 176.35540835 1.00000000]
[1762.49999937 233.21813489 42.10271758 176.35540835 141.81324499 1.00000000]
[1762.49999937 233.21813489 42.10271758 141.81324499 107.27108163 1.00000000]
[1762.49999937 233.21813489 42.10271758 107.27108163 72.72891827 1.00000000]
[1762.49999937 233.21813489 42.10271758 72.72891827 38.18675492 1.00000000]
[1762.49999937 233.21813489 42.10271758 38.18675492 3.64459156 1.00000000]
[1762.49999937 233.21813489 42.10271758 3.64459156 329.10242820 1.00000000]
[1762.49999937 233.21813489 42.10271758 329.10242820 294.56026478 1.00000000]
[1762.49999918 172.46233926 28.47466715 52.07849130 360.00000000 1.00000000]
[1762.49999918 172.46233926 28.47466715 360.00000000 307.92150811 1.00000000]
[]
[]
[]
] def
/pairs [
[14 26]
[15 25]
[16 24]
[17 23]
[58 96]
[59 95]
[60 94]
[62 92]
[63 91]
[64 89]
[65 88]
[66 87]
[67 86]
[69 84]
[70 83]
[72 81]
[73 80]
[74 79]
[114 131]
[115 130]
[116 129]
[118 127]
] def

init

% Start Annotations
49 51 12 1.00 0.60 0.67 omark 64 79 12 0.72 0.69 0.47 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
