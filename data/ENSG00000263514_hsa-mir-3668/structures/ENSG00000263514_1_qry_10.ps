%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Nov  6 23:08:50 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACUAUUUUACAACUAACUAUUUAAAAAAUGUCUUAGAGUUUAACUGGCCUAAAAUAUAUGAAAUGUAGAGAUUGAUCAAAUAGUUUUGAUCAAUCUCUGCAAUUUUAUAUAUGAAGAAACUGAAGUCUGAAAGUAUUAUACCCUUUAUGUCUCUAUUCUGAA\
) } def
/len { sequence length } bind def

/coor [
[100.00000000 100.00000000]
[125.00000000 100.00000000]
[150.00000000 100.00000000]
[175.00000000 100.00000000]
[200.00000000 100.00000000]
[225.00000000 100.00000000]
[250.00000000 100.00000000]
[275.00000000 100.00000000]
[300.00000000 100.00000000]
[325.00000000 100.00000000]
[350.00000000 100.00000000]
[375.00000000 100.00000000]
[400.00000000 100.00000000]
[425.00000000 100.00000000]
[450.00000000 100.00000000]
[475.00000000 100.00000000]
[500.00000000 100.00000000]
[525.00000000 100.00000000]
[550.00000000 100.00000000]
[575.00000000 100.00000000]
[600.00000000 100.00000000]
[625.00000000 100.00000000]
[650.00000000 100.00000000]
[675.00000000 100.00000000]
[700.00000000 100.00000000]
[725.00000000 100.00000000]
[750.00000000 100.00000000]
[775.00000000 100.00000000]
[800.00000000 100.00000000]
[825.00000000 100.00000000]
[850.00000000 100.00000000]
[875.00000000 100.00000000]
[900.00000000 100.00000000]
[925.00000000 100.00000000]
[950.00000000 100.00000000]
[950.00000000 125.00000000]
[950.00000000 150.00000000]
[950.00000000 175.00000000]
[950.00000000 200.00000000]
[950.00000000 225.00000000]
[950.00000000 250.00000000]
[926.06250000 257.25741577]
[904.60070801 270.10516357]
[886.89685059 287.77563477]
[874.00866699 309.21316528]
[866.70611572 333.13693237]
[865.42553711 358.11758423]
[870.24346924 382.66265869]
[880.87194824 405.30572510]
[896.67608643 424.69390869]
[916.71160889 439.66894531]
[939.78149414 449.33605957]
[964.50744629 453.11773682]
[989.41217041 450.78805542]
[1013.00775146 442.48614502]
[1033.88439941 428.70803833]
[1053.11669922 444.68054199]
[1072.34887695 460.65304565]
[1091.58117676 476.62554932]
[1110.81335449 492.59808350]
[1130.04565430 508.57058716]
[1149.27783203 524.54309082]
[1168.51013184 540.51556396]
[1187.74230957 556.48809814]
[1206.97460938 572.46063232]
[1226.20678711 588.43310547]
[1245.43908691 604.40563965]
[1264.67126465 620.37811279]
[1283.90356445 636.35064697]
[1303.13574219 652.32312012]
[1322.36804199 668.29565430]
[1341.60021973 684.26818848]
[1360.83251953 700.24066162]
[1380.06469727 716.21319580]
[1399.29699707 732.18566895]
[1418.52917480 748.15820312]
[1437.76147461 764.13067627]
[1456.99365234 780.10321045]
[1476.22595215 796.07568359]
[1495.45812988 812.04821777]
[1514.69042969 828.02075195]
[1533.92260742 843.99322510]
[1546.02294922 865.86975098]
[1570.91271973 868.21429443]
[1586.88525391 848.98205566]
[1580.01049805 824.94586182]
[1556.28417969 817.06811523]
[1537.05187988 801.09558105]
[1517.81970215 785.12310791]
[1498.58740234 769.15057373]
[1479.35522461 753.17810059]
[1460.12292480 737.20556641]
[1440.89074707 721.23303223]
[1421.65844727 705.26055908]
[1402.42626953 689.28802490]
[1383.19396973 673.31555176]
[1363.96179199 657.34301758]
[1344.72949219 641.37054443]
[1325.49731445 625.39801025]
[1306.26501465 609.42547607]
[1287.03283691 593.45300293]
[1267.80053711 577.48046875]
[1272.01708984 552.83862305]
[1248.56835938 561.50799561]
[1229.33605957 545.53546143]
[1210.10388184 529.56298828]
[1190.87158203 513.59045410]
[1171.63940430 497.61795044]
[1152.40710449 481.64544678]
[1133.17492676 465.67294312]
[1113.94262695 449.70043945]
[1094.71044922 433.72793579]
[1075.47814941 417.75540161]
[1056.24597168 401.78289795]
[1065.95288086 378.74435425]
[1069.78405762 354.03964233]
[1067.51074219 329.14321899]
[1090.67736816 319.74581909]
[1113.84387207 310.34844971]
[1138.78417969 312.07476807]
[1155.47387695 293.46145630]
[1178.64038086 284.06405640]
[1201.80700684 274.66668701]
[1224.97351074 265.26928711]
[1248.14013672 255.87191772]
[1271.30664062 246.47453308]
[1294.47314453 237.07714844]
[1311.96362305 254.94003296]
[1334.22839355 266.31021118]
[1358.95373535 270.00613403]
[1383.57019043 265.64370728]
[1405.51965332 253.67628479]
[1422.52124023 235.34748840]
[1432.80822754 212.56199646]
[1435.31152344 187.68763733]
[1429.77099609 163.30931091]
[1416.76257324 141.96035767]
[1397.63781738 125.85930634]
[1374.38415527 116.67934418]
[1349.41821289 115.37445068]
[1325.33435059 122.08020782]
[1304.63537598 136.09977722]
[1289.47204590 155.97628784]
[1281.42028809 179.64418030]
[1281.31689453 204.64396667]
[1258.15026855 214.04135132]
[1234.98376465 223.43873596]
[1211.81713867 232.83612061]
[1188.65063477 242.23350525]
[1168.92895508 226.86938477]
[1165.48413086 251.63088989]
[1142.31750488 261.02828979]
[1117.37719727 259.30197144]
[1100.68750000 277.91525269]
[1077.52099609 287.31265259]
[1054.35437012 296.71002197]
[985.00000000 250.00000000]
[985.00000000 225.00000000]
[985.00000000 200.00000000]
[985.00000000 175.00000000]
[985.00000000 150.00000000]
[985.00000000 125.00000000]
[985.00000000 100.00000000]
[1010.00000000 100.00000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[967.49999968 350.82704545 102.33446680 260.15357563 246.11375663 1.00000000]
[967.49999968 350.82704545 102.33446680 246.11375663 232.07393763 1.00000000]
[967.49999968 350.82704545 102.33446680 232.07393763 218.03411863 1.00000000]
[967.49999968 350.82704545 102.33446680 218.03411863 203.99429962 1.00000000]
[967.49999968 350.82704545 102.33446680 203.99429962 189.95448062 1.00000000]
[967.49999968 350.82704545 102.33446680 189.95448062 175.91466162 1.00000000]
[967.49999968 350.82704545 102.33446680 175.91466162 161.87484262 1.00000000]
[967.49999968 350.82704545 102.33446680 161.87484262 147.83502361 1.00000000]
[967.49999968 350.82704545 102.33446680 147.83502361 133.79520461 1.00000000]
[967.49999968 350.82704545 102.33446680 133.79520461 119.75538561 1.00000000]
[967.49999968 350.82704545 102.33446680 119.75538561 105.71556661 1.00000000]
[967.49999968 350.82704545 102.33446680 105.71556661 91.67574760 1.00000000]
[967.49999968 350.82704545 102.33446680 91.67574760 77.63592860 1.00000000]
[967.49999968 350.82704545 102.33446680 77.63592860 63.59610960 1.00000000]
[967.49999968 350.82704545 102.33446680 63.59610960 49.55629059 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[1560.68784931 843.47366200 26.77024824 178.88789922 123.21668602 1.00000000]
[1560.68784931 843.47366200 26.77024824 123.21668602 67.54547283 1.00000000]
[1560.68784931 843.47366200 26.77024824 67.54547283 11.87425963 1.00000000]
[1560.68784931 843.47366200 26.77024824 11.87425963 316.20304643 1.00000000]
[1560.68784931 843.47366200 26.77024824 316.20304643 260.53183324 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[967.49999968 350.82704545 102.33446680 29.86344186 15.83121391 1.00000000]
[967.49999968 350.82704545 102.33446680 15.83121391 1.79898596 1.00000000]
[967.49999968 350.82704545 102.33446680 1.79898596 347.76675800 1.00000000]
[]
[]
[1128.08070299 285.68835865 28.47466729 119.99882554 67.92033361 1.00000000]
[1128.08070299 285.68835865 28.47466729 67.92033361 15.84184169 1.00000000]
[]
[]
[]
[]
[]
[]
[1357.90624356 192.46088094 77.55232834 144.87898967 126.32802789 1.00000000]
[1357.90624356 192.46088094 77.55232834 126.32802789 107.77706610 1.00000000]
[1357.90624356 192.46088094 77.55232834 107.77706610 89.22610431 1.00000000]
[1357.90624356 192.46088094 77.55232834 89.22610431 70.67514252 1.00000000]
[1357.90624356 192.46088094 77.55232834 70.67514252 52.12418074 1.00000000]
[1357.90624356 192.46088094 77.55232834 52.12418074 33.57321895 1.00000000]
[1357.90624356 192.46088094 77.55232834 33.57321895 15.02225716 1.00000000]
[1357.90624356 192.46088094 77.55232834 15.02225716 356.47129538 1.00000000]
[1357.90624356 192.46088094 77.55232834 356.47129538 337.92033359 1.00000000]
[1357.90624356 192.46088094 77.55232834 337.92033359 319.36937180 1.00000000]
[1357.90624356 192.46088094 77.55232834 319.36937180 300.81841002 1.00000000]
[1357.90624356 192.46088094 77.55232834 300.81841002 282.26744823 1.00000000]
[1357.90624356 192.46088094 77.55232834 282.26744823 263.71648644 1.00000000]
[1357.90624356 192.46088094 77.55232834 263.71648644 245.16552466 1.00000000]
[1357.90624356 192.46088094 77.55232834 245.16552466 226.61456287 1.00000000]
[1357.90624356 192.46088094 77.55232834 226.61456287 208.06360108 1.00000000]
[1357.90624356 192.46088094 77.55232834 208.06360108 189.51263930 1.00000000]
[1357.90624356 192.46088094 77.55232834 189.51263930 170.96167751 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[1128.08070299 285.68835865 28.47466729 299.99882549 247.92033357 1.00000000]
[1128.08070299 285.68835865 28.47466729 247.92033357 195.84184174 1.00000000]
[]
[]
[967.49999968 350.82704545 102.33446680 328.07390927 279.84642437 1.00000000]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[35 163]
[36 162]
[37 161]
[38 160]
[39 159]
[40 158]
[41 157]
[56 114]
[57 113]
[58 112]
[59 111]
[60 110]
[61 109]
[62 108]
[63 107]
[64 106]
[65 105]
[66 104]
[67 102]
[68 101]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[117 156]
[118 155]
[119 154]
[121 152]
[122 151]
[123 149]
[124 148]
[125 147]
[126 146]
[127 145]
] def

init

% Start Annotations
56 82 12 1.00 0.60 0.67 omark 87 114 12 0.72 0.69 0.47 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
