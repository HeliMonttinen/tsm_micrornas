%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Nov  6 23:08:52 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGAGAGAUGAGGAAGGUUAAGGCUGAGGAACUGGCAUCUAUGAAAGCCAGGCUCUGAAGGGAAAGUUGAAUCUUGCUAGAGUGGAGAAUUGAGGAAGAGAUGAGAUGUUAAGGCAAGUCGAGU\
) } def
/len { sequence length } bind def

/coor [
[100.00000000 100.00000000]
[125.00000000 100.00000000]
[150.00000000 100.00000000]
[175.00000000 100.00000000]
[200.00000000 100.00000000]
[225.00000000 100.00000000]
[250.00000000 100.00000000]
[275.00000000 100.00000000]
[300.00000000 100.00000000]
[325.00000000 100.00000000]
[350.00000000 100.00000000]
[375.00000000 100.00000000]
[375.00000000 125.00000000]
[364.02532959 147.46234131]
[375.00000000 169.92468262]
[375.00000000 194.92468262]
[375.00000000 219.92468262]
[375.00000000 244.92468262]
[375.00000000 269.92468262]
[375.00000000 294.92468262]
[360.92852783 315.58850098]
[365.87762451 340.09375000]
[386.86563110 353.67694092]
[396.56793213 376.71746826]
[406.27023315 399.75799561]
[415.97250366 422.79852295]
[400.61911011 442.52850342]
[394.74090576 466.82760620]
[399.37860107 491.39367676]
[380.21792603 507.45193481]
[361.05722046 523.51019287]
[336.18136597 525.99847412]
[320.57882690 545.53204346]
[296.68783569 552.89556885]
[272.79687500 560.25909424]
[248.90591431 567.62261963]
[225.01493835 574.98614502]
[205.27551270 559.64483643]
[180.57363892 555.79553223]
[157.10223389 564.40325928]
[140.74571228 583.30993652]
[135.60478210 607.77569580]
[142.96830750 631.66662598]
[160.99020386 648.99322510]
[185.15225220 655.41162109]
[209.39688110 649.31256104]
[227.64579773 632.22521973]
[235.32386780 608.43347168]
[259.21484375 601.06994629]
[283.10580444 593.70642090]
[306.99679565 586.34289551]
[330.88775635 578.97943115]
[354.77954102 586.34027100]
[376.73999023 574.39294434]
[383.53878784 550.33520508]
[402.69949341 534.27691650]
[421.86016846 518.21868896]
[445.23715210 527.07965088]
[470.18969727 525.54003906]
[492.29998779 513.87231445]
[507.65338135 494.14233398]
[513.53161621 469.84323120]
[508.89385986 445.27716064]
[494.56130981 424.79354858]
[473.07153320 412.01904297]
[448.22924805 409.21530151]
[438.52694702 386.17477417]
[428.82464600 363.13427734]
[419.12237549 340.09375000]
[424.07147217 315.58850098]
[410.00000000 294.92468262]
[410.00000000 269.92468262]
[410.00000000 244.92468262]
[410.00000000 219.92468262]
[410.00000000 194.92468262]
[410.00000000 169.92468262]
[420.97467041 147.46234131]
[410.00000000 125.00000000]
[410.00000000 100.00000000]
[435.00000000 100.00000000]
[460.00000000 100.00000000]
[485.00000000 100.00000000]
[510.00000000 100.00000000]
[535.00000000 100.00000000]
[560.00000000 100.00000000]
[585.00000000 100.00000000]
[610.00000000 100.00000000]
[635.00000000 100.00000000]
[660.00000000 100.00000000]
[685.00000000 100.00000000]
[710.00000000 100.00000000]
[735.00000000 100.00000000]
[760.00000000 100.00000000]
[785.00000000 100.00000000]
[810.00000000 100.00000000]
[835.00000000 100.00000000]
[860.00000000 100.00000000]
[885.00000000 100.00000000]
[910.00000000 100.00000000]
[935.00000000 100.00000000]
[960.00000000 100.00000000]
[985.00000000 100.00000000]
[1010.00000000 100.00000000]
[1035.00000000 100.00000000]
[1035.00000000 125.00000000]
[1018.72460938 143.97660828]
[1018.72460938 168.97660828]
[1035.00000000 187.95321655]
[1035.00000000 212.95321655]
[1035.00000000 237.95321655]
[1025.90148926 261.23876953]
[1040.00000000 281.88415527]
[1065.00000000 281.88415527]
[1079.09851074 261.23876953]
[1070.00000000 237.95321655]
[1070.00000000 212.95321655]
[1070.00000000 187.95321655]
[1086.27539062 168.97660828]
[1086.27539062 143.97660828]
[1070.00000000 125.00000000]
[1070.00000000 100.00000000]
[1095.00000000 100.00000000]
[1120.00000000 100.00000000]
[1145.00000000 100.00000000]
[1170.00000000 100.00000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[392.49999988 147.46233915 28.47466717 232.07849217 180.00000000 1.00000000]
[392.49999988 147.46233915 28.47466717 180.00000000 127.92150793 1.00000000]
[]
[]
[]
[]
[]
[392.49999988 321.96470107 32.20889339 237.08950839 191.41790193 1.00000000]
[392.49999988 321.96470107 32.20889339 191.41790193 145.74629524 1.00000000]
[392.49999988 321.96470107 32.20889339 145.74629524 100.07468854 1.00000000]
[]
[]
[]
[454.13624219 468.33542524 59.41448475 230.03418280 205.74418747 1.00000000]
[454.13624219 468.33542524 59.41448475 205.74418747 181.45419214 1.00000000]
[454.13624219 468.33542524 59.41448475 181.45419214 157.16419681 1.00000000]
[]
[]
[351.57378455 554.29132629 32.20889362 287.12369067 241.45208438 1.00000000]
[351.57378455 554.29132629 32.20889362 241.45208438 195.78047809 1.00000000]
[]
[]
[]
[]
[185.48162111 605.48320388 49.92949042 322.35243646 293.35562728 1.00000000]
[185.48162111 605.48320388 49.92949042 293.35562728 264.35881809 1.00000000]
[185.48162111 605.48320388 49.92949042 264.35881809 235.36200891 1.00000000]
[185.48162111 605.48320388 49.92949042 235.36200891 206.36519973 1.00000000]
[185.48162111 605.48320388 49.92949042 206.36519973 177.36839054 1.00000000]
[185.48162111 605.48320388 49.92949042 177.36839054 148.37158136 1.00000000]
[185.48162111 605.48320388 49.92949042 148.37158136 119.37477217 1.00000000]
[185.48162111 605.48320388 49.92949042 119.37477217 90.37796299 1.00000000]
[185.48162111 605.48320388 49.92949042 90.37796299 61.38115380 1.00000000]
[185.48162111 605.48320388 49.92949042 61.38115380 32.38434462 1.00000000]
[185.48162111 605.48320388 49.92949042 32.38434462 3.38753544 1.00000000]
[]
[]
[]
[]
[351.57378455 554.29132629 32.20889362 129.95949381 84.28788752 1.00000000]
[351.57378455 554.29132629 32.20889362 84.28788752 38.61628123 1.00000000]
[351.57378455 554.29132629 32.20889362 38.61628123 352.94467494 1.00000000]
[]
[]
[454.13624219 468.33542524 59.41448475 122.90416880 98.61417347 1.00000000]
[454.13624219 468.33542524 59.41448475 98.61417347 74.32417814 1.00000000]
[454.13624219 468.33542524 59.41448475 74.32417814 50.03418280 1.00000000]
[454.13624219 468.33542524 59.41448475 50.03418280 25.74418747 1.00000000]
[454.13624219 468.33542524 59.41448475 25.74418747 1.45419214 1.00000000]
[454.13624219 468.33542524 59.41448475 1.45419214 337.16419681 1.00000000]
[454.13624219 468.33542524 59.41448475 337.16419681 312.87420148 1.00000000]
[454.13624219 468.33542524 59.41448475 312.87420148 288.58420614 1.00000000]
[454.13624219 468.33542524 59.41448475 288.58420614 264.29421081 1.00000000]
[]
[]
[]
[392.49999988 321.96470107 32.20889339 34.25370414 348.58209816 1.00000000]
[392.49999988 321.96470107 32.20889339 348.58209816 302.91049231 1.00000000]
[]
[]
[]
[]
[]
[392.49999988 147.46233915 28.47466717 52.07849159 360.00000000 1.00000000]
[392.49999988 147.46233915 28.47466717 360.00000000 307.92150822 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[1052.50000001 156.47660926 36.01426010 240.92732378 200.30910793 1.00000000]
[1052.50000001 156.47660926 36.01426010 200.30910793 159.69089207 1.00000000]
[1052.50000001 156.47660926 36.01426010 159.69089207 119.07267622 1.00000000]
[]
[]
[1052.50000001 258.21145613 26.77024824 229.17803299 173.50681980 1.00000000]
[1052.50000001 258.21145613 26.77024824 173.50681980 117.83560660 1.00000000]
[1052.50000001 258.21145613 26.77024824 117.83560660 62.16439340 1.00000000]
[1052.50000001 258.21145613 26.77024824 62.16439340 6.49318020 1.00000000]
[1052.50000001 258.21145613 26.77024824 6.49318020 310.82196701 1.00000000]
[]
[]
[1052.50000001 156.47660926 36.01426010 60.92732378 20.30910793 1.00000000]
[1052.50000001 156.47660926 36.01426010 20.30910793 339.69089207 1.00000000]
[1052.50000001 156.47660926 36.01426010 339.69089207 299.07267622 1.00000000]
[]
[]
[]
[]
[]
] def
/pairs [
[12 79]
[13 78]
[15 76]
[16 75]
[17 74]
[18 73]
[19 72]
[20 71]
[23 69]
[24 68]
[25 67]
[26 66]
[29 57]
[30 56]
[31 55]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[104 121]
[105 120]
[108 117]
[109 116]
[110 115]
] def

init

% Start Annotations
34 34 12 1.00 0.60 0.67 omark 45 75 12 0.72 0.69 0.47 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
