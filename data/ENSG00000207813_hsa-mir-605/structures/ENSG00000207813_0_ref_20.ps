%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Nov  6 23:08:49 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
YAAAGUAGAAACUUUGUAGACMUUUCACAGUCACCCUAUAACAUAUGUCUGUAGCCCUAGCUUGGUUCUAAAUCCCAUUUUUUKUUUGWAGUGYMUU\
) } def
/len { sequence length } bind def

/coor [
[100.00000000 100.00000000]
[125.00000000 100.00000000]
[150.00000000 100.00000000]
[175.00000000 100.00000000]
[200.00000000 100.00000000]
[225.00000000 100.00000000]
[225.00000000 125.00000000]
[225.00000000 150.00000000]
[225.00000000 175.00000000]
[225.00000000 200.00000000]
[203.34936523 212.50000000]
[225.00000000 225.00000000]
[225.00000000 250.00000000]
[208.72460938 268.97662354]
[208.72460938 293.97662354]
[225.00000000 312.95321655]
[225.00000000 337.95321655]
[202.66966248 349.19403076]
[186.23747253 368.03503418]
[162.01998901 361.82910156]
[137.80250549 355.62316895]
[126.27500153 333.43948364]
[104.20124817 321.70281982]
[79.36405945 324.55130005]
[60.52056122 340.98062134]
[54.31464005 365.19812012]
[62.93437958 388.66510010]
[83.34062195 403.10760498]
[108.33850098 403.43341064]
[129.11421204 389.52764893]
[153.33169556 395.73358154]
[177.54917908 401.93951416]
[182.89492798 426.36126709]
[197.06712341 446.95614624]
[217.96711731 460.67440796]
[242.50000000 465.48458862]
[249.23425293 489.56048584]
[255.96850586 513.63641357]
[262.70275879 537.71234131]
[269.43701172 561.78826904]
[276.17126465 585.86419678]
[282.90551758 609.94006348]
[280.41574097 634.81579590]
[299.55438232 650.90032959]
[323.63031006 644.16607666]
[331.64645386 620.48608398]
[316.61181641 600.51214600]
[309.87756348 576.43621826]
[327.36077881 558.56622314]
[303.14331055 552.36029053]
[296.40905762 528.28436279]
[289.67480469 504.20846558]
[282.94055176 480.13253784]
[276.20629883 456.05661011]
[294.68328857 439.21618652]
[305.43286133 416.64526367]
[306.86322021 391.68621826]
[298.76251221 368.03503418]
[282.33035278 349.19403076]
[260.00000000 337.95321655]
[260.00000000 312.95321655]
[276.27539062 293.97662354]
[276.27539062 268.97662354]
[260.00000000 250.00000000]
[260.00000000 225.00000000]
[260.00000000 200.00000000]
[260.00000000 175.00000000]
[260.00000000 150.00000000]
[260.00000000 125.00000000]
[260.00000000 100.00000000]
[285.00000000 100.00000000]
[310.00000000 100.00000000]
[335.00000000 100.00000000]
[360.00000000 100.00000000]
[385.00000000 100.00000000]
[410.00000000 100.00000000]
[435.00000000 100.00000000]
[460.00000000 100.00000000]
[485.00000000 100.00000000]
[510.00000000 100.00000000]
[535.00000000 100.00000000]
[560.00000000 100.00000000]
[585.00000000 100.00000000]
[610.00000000 100.00000000]
[635.00000000 100.00000000]
[660.00000000 100.00000000]
[685.00000000 100.00000000]
[710.00000000 100.00000000]
[735.00000000 100.00000000]
[760.00000000 100.00000000]
[785.00000000 100.00000000]
[810.00000000 100.00000000]
[835.00000000 100.00000000]
[860.00000000 100.00000000]
[885.00000000 100.00000000]
[910.00000000 100.00000000]
[935.00000000 100.00000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[242.50000000 281.47660926 36.01426010 240.92732378 200.30910793 1.00000000]
[242.50000000 281.47660926 36.01426010 200.30910793 159.69089207 1.00000000]
[242.50000000 281.47660926 36.01426010 159.69089207 119.07267622 1.00000000]
[]
[242.50000000 400.51821377 64.96636537 254.37320907 232.18660453 1.00000000]
[242.50000000 400.51821377 64.96636537 232.18660453 210.00000000 1.00000000]
[]
[]
[96.36351713 363.06957023 42.10271758 349.81294418 315.27078082 1.00000000]
[96.36351713 363.06957023 42.10271758 315.27078082 280.72861746 1.00000000]
[96.36351713 363.06957023 42.10271758 280.72861746 246.18645410 1.00000000]
[96.36351713 363.06957023 42.10271758 246.18645410 211.64429075 1.00000000]
[96.36351713 363.06957023 42.10271758 211.64429075 177.10212739 1.00000000]
[96.36351713 363.06957023 42.10271758 177.10212739 142.55996403 1.00000000]
[96.36351713 363.06957023 42.10271758 142.55996403 108.01780067 1.00000000]
[96.36351713 363.06957023 42.10271758 108.01780067 73.47563731 1.00000000]
[96.36351713 363.06957023 42.10271758 73.47563731 38.93347396 1.00000000]
[]
[]
[242.50000000 400.51821377 64.96636537 178.74641813 156.55981360 1.00000000]
[242.50000000 400.51821377 64.96636537 156.55981360 134.37320907 1.00000000]
[242.50000000 400.51821377 64.96636537 134.37320907 112.18660453 1.00000000]
[242.50000000 400.51821377 64.96636537 112.18660453 90.00000000 1.00000000]
[]
[]
[]
[]
[]
[]
[305.21563064 624.73553564 26.77024824 213.55124206 157.88002886 1.00000000]
[305.21563064 624.73553564 26.77024824 157.88002886 102.20881567 1.00000000]
[305.21563064 624.73553564 26.77024824 102.20881567 46.53760247 1.00000000]
[305.21563064 624.73553564 26.77024824 46.53760247 350.86638927 1.00000000]
[305.21563064 624.73553564 26.77024824 350.86638927 295.19517607 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[242.50000000 400.51821377 64.96636537 58.74641813 36.55981360 1.00000000]
[242.50000000 400.51821377 64.96636537 36.55981360 14.37320907 1.00000000]
[242.50000000 400.51821377 64.96636537 14.37320907 352.18660453 1.00000000]
[242.50000000 400.51821377 64.96636537 352.18660453 330.00000000 1.00000000]
[242.50000000 400.51821377 64.96636537 330.00000000 307.81339547 1.00000000]
[242.50000000 400.51821377 64.96636537 307.81339547 285.62679093 1.00000000]
[]
[242.50000000 281.47660926 36.01426010 60.92732378 20.30910793 1.00000000]
[242.50000000 281.47660926 36.01426010 20.30910793 339.69089207 1.00000000]
[242.50000000 281.47660926 36.01426010 339.69089207 299.07267622 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[12 65]
[13 64]
[16 61]
[17 60]
[19 32]
[20 31]
[21 30]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 48]
[42 47]
] def

init

% Start Annotations
97 97 12 1.00 0.60 0.67 omark 39 78 12 0.72 0.69 0.47 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
