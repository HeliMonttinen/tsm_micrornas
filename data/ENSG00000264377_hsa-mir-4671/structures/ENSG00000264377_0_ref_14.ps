%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Nov  6 23:08:51 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCASUCAAGGGCAUACAUGGGCAAGCCAGCUGACAUGGAUUAGUGCACAGUCUUUGGUCUUAAAACAGCACAAGGCUCACUAGCCCAGGGGGCCAAUCAUCUUGGUCUCAUUAGAAC\
) } def
/len { sequence length } bind def

/coor [
[100.00000000 100.00000000]
[125.00000000 100.00000000]
[150.00000000 100.00000000]
[175.00000000 100.00000000]
[200.00000000 100.00000000]
[225.00000000 100.00000000]
[250.00000000 100.00000000]
[275.00000000 100.00000000]
[300.00000000 100.00000000]
[325.00000000 100.00000000]
[350.00000000 100.00000000]
[350.00000000 125.00000000]
[350.00000000 150.00000000]
[350.00000000 175.00000000]
[328.34936523 187.50000000]
[350.00000000 200.00000000]
[350.00000000 225.00000000]
[335.92852783 245.66383362]
[340.87762451 270.16906738]
[361.86563110 283.75225830]
[371.56793213 306.79278564]
[381.27023315 329.83331299]
[390.97250366 352.87384033]
[400.67480469 375.91436768]
[384.68881226 395.13537598]
[377.38305664 419.04409790]
[379.89511108 443.91757202]
[391.83380127 465.88269043]
[411.34017944 481.51922607]
[435.37683105 488.39239502]
[460.20089722 485.43188477]
[474.25842285 506.10522461]
[488.31594849 526.77856445]
[502.37344360 547.45184326]
[492.05462646 570.22296143]
[492.78030396 595.21240234]
[504.40319824 617.34631348]
[524.56329346 632.13043213]
[549.16717529 636.56298828]
[558.20550537 659.87194824]
[567.24383545 683.18090820]
[576.28216553 706.48992920]
[585.32049561 729.79888916]
[594.35882568 753.10784912]
[603.39715576 776.41687012]
[589.49353027 797.19396973]
[587.40472412 822.10656738]
[597.65435791 844.90887451]
[617.67285156 859.88415527]
[642.44140625 863.27813721]
[665.75036621 854.23980713]
[681.75604248 835.03515625]
[686.44573975 810.47894287]
[678.64367676 786.72760010]
[660.30584717 769.73565674]
[636.02972412 763.76318359]
[626.99139404 740.45422363]
[617.95306396 717.14520264]
[608.91473389 693.83624268]
[599.87640381 670.52728271]
[590.83807373 647.21826172]
[581.79974365 623.90930176]
[596.98364258 604.04858398]
[601.90679932 579.53808594]
[595.56958008 555.35467529]
[579.25872803 536.40850830]
[556.28607178 526.54663086]
[531.31610107 527.77136230]
[517.25860596 507.09802246]
[503.20108032 486.42471313]
[489.14355469 465.75137329]
[501.02294922 443.75411987]
[503.46786499 418.87393188]
[496.09759521 394.98504639]
[480.05981445 375.80722046]
[457.85174561 364.32672119]
[432.93151855 362.33114624]
[423.22924805 339.29061890]
[413.52694702 316.25012207]
[403.82464600 293.20959473]
[394.12237549 270.16906738]
[399.07147217 245.66383362]
[385.00000000 225.00000000]
[385.00000000 200.00000000]
[385.00000000 175.00000000]
[385.00000000 150.00000000]
[385.00000000 125.00000000]
[385.00000000 100.00000000]
[410.00000000 100.00000000]
[435.00000000 100.00000000]
[460.00000000 100.00000000]
[460.00000000 125.00000000]
[460.00000000 150.00000000]
[460.00000000 175.00000000]
[460.00000000 200.00000000]
[460.00000000 225.00000000]
[460.00000000 250.00000000]
[460.00000000 275.00000000]
[447.17904663 296.46212769]
[454.69174194 320.30661011]
[477.50000000 330.54299927]
[500.30825806 320.30661011]
[507.82095337 296.46212769]
[495.00000000 275.00000000]
[495.00000000 250.00000000]
[495.00000000 225.00000000]
[495.00000000 200.00000000]
[495.00000000 175.00000000]
[495.00000000 150.00000000]
[495.00000000 125.00000000]
[495.00000000 100.00000000]
[520.00000000 100.00000000]
[545.00000000 100.00000000]
[570.00000000 100.00000000]
[595.00000000 100.00000000]
[620.00000000 100.00000000]
[645.00000000 100.00000000]
[670.00000000 100.00000000]
[695.00000000 100.00000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[367.50000000 252.04002271 32.20889362 237.08950786 191.41790157 1.00000000]
[367.50000000 252.04002271 32.20889362 191.41790157 145.74629528 1.00000000]
[367.50000000 252.04002271 32.20889362 145.74629528 100.07468899 1.00000000]
[]
[]
[]
[]
[440.43393468 425.23995376 63.35458712 231.12928108 208.37079363 1.00000000]
[440.43393468 425.23995376 63.35458712 208.37079363 185.61230617 1.00000000]
[440.43393468 425.23995376 63.35458712 185.61230617 162.85381872 1.00000000]
[440.43393468 425.23995376 63.35458712 162.85381872 140.09533126 1.00000000]
[440.43393468 425.23995376 63.35458712 140.09533126 117.33684381 1.00000000]
[440.43393468 425.23995376 63.35458712 117.33684381 94.57835636 1.00000000]
[440.43393468 425.23995376 63.35458712 94.57835636 71.81986890 1.00000000]
[]
[]
[]
[546.44920229 581.14859363 55.48099457 217.39858147 191.35726207 1.00000000]
[546.44920229 581.14859363 55.48099457 191.35726207 165.31594267 1.00000000]
[546.44920229 581.14859363 55.48099457 165.31594267 139.27462328 1.00000000]
[546.44920229 581.14859363 55.48099457 139.27462328 113.23330388 1.00000000]
[546.44920229 581.14859363 55.48099457 113.23330388 87.19198449 1.00000000]
[]
[]
[]
[]
[]
[]
[636.61955224 813.68919858 49.92949042 228.28806334 199.29125415 1.00000000]
[636.61955224 813.68919858 49.92949042 199.29125415 170.29444497 1.00000000]
[636.61955224 813.68919858 49.92949042 170.29444497 141.29763579 1.00000000]
[636.61955224 813.68919858 49.92949042 141.29763579 112.30082660 1.00000000]
[636.61955224 813.68919858 49.92949042 112.30082660 83.30401742 1.00000000]
[636.61955224 813.68919858 49.92949042 83.30401742 54.30720823 1.00000000]
[636.61955224 813.68919858 49.92949042 54.30720823 25.31039905 1.00000000]
[636.61955224 813.68919858 49.92949042 25.31039905 356.31358987 1.00000000]
[636.61955224 813.68919858 49.92949042 356.31358987 327.31678068 1.00000000]
[636.61955224 813.68919858 49.92949042 327.31678068 298.31997150 1.00000000]
[636.61955224 813.68919858 49.92949042 298.31997150 269.32316231 1.00000000]
[]
[]
[]
[]
[]
[]
[546.44920229 581.14859363 55.48099457 50.41924116 24.37792177 1.00000000]
[546.44920229 581.14859363 55.48099457 24.37792177 358.33660237 1.00000000]
[546.44920229 581.14859363 55.48099457 358.33660237 332.29528298 1.00000000]
[546.44920229 581.14859363 55.48099457 332.29528298 306.25396358 1.00000000]
[546.44920229 581.14859363 55.48099457 306.25396358 280.21264419 1.00000000]
[546.44920229 581.14859363 55.48099457 280.21264419 254.17132479 1.00000000]
[]
[]
[]
[440.43393468 425.23995376 63.35458712 39.75003736 16.99154990 1.00000000]
[440.43393468 425.23995376 63.35458712 16.99154990 354.23306245 1.00000000]
[440.43393468 425.23995376 63.35458712 354.23306245 331.47457499 1.00000000]
[440.43393468 425.23995376 63.35458712 331.47457499 308.71608754 1.00000000]
[440.43393468 425.23995376 63.35458712 308.71608754 285.95760008 1.00000000]
[440.43393468 425.23995376 63.35458712 285.95760008 263.19911263 1.00000000]
[]
[]
[]
[]
[367.50000000 252.04002271 32.20889362 34.25370472 348.58209843 1.00000000]
[367.50000000 252.04002271 32.20889362 348.58209843 302.91049214 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[477.50000000 300.01461919 30.52836670 235.02371410 186.68247606 1.00000000]
[477.50000000 300.01461919 30.52836670 186.68247606 138.34123803 1.00000000]
[477.50000000 300.01461919 30.52836670 138.34123803 90.00000000 1.00000000]
[477.50000000 300.01461919 30.52836670 90.00000000 41.65876197 1.00000000]
[477.50000000 300.01461919 30.52836670 41.65876197 353.31752394 1.00000000]
[477.50000000 300.01461919 30.52836670 353.31752394 304.97628590 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 88]
[12 87]
[13 86]
[14 85]
[16 84]
[17 83]
[20 81]
[21 80]
[22 79]
[23 78]
[24 77]
[31 71]
[32 70]
[33 69]
[34 68]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[91 111]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% Start Annotations
1 0 12 1.00 0.60 0.67 omark 40 75 12 0.72 0.69 0.47 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
