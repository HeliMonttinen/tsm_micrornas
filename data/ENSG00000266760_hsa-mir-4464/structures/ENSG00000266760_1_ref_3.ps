%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Nov  6 23:08:55 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUUGCUUCAAUUUAUUAUAAGUUUAUUAAAAAUCAGGAACAGCAGUUGCUGUUCCACAGCUGAAAGGACAUACUUUAUUUCAUCUAUCCAAACCUUACUAAUUCAGAGUUUUGUGCUGUGUGUAUGUGUGUGUAGUAGGAGUGUGUGUGUGUGUGUG\
) } def
/len { sequence length } bind def

/coor [
[100.00000000 100.00000000]
[125.00000000 100.00000000]
[125.00000000 125.00000000]
[125.00000000 150.00000000]
[125.00000000 175.00000000]
[125.00000000 200.00000000]
[125.00000000 225.00000000]
[121.46457672 249.74874878]
[142.50000000 263.25842285]
[163.53543091 249.74874878]
[160.00000000 225.00000000]
[160.00000000 200.00000000]
[160.00000000 175.00000000]
[160.00000000 150.00000000]
[160.00000000 125.00000000]
[160.00000000 100.00000000]
[185.00000000 100.00000000]
[210.00000000 100.00000000]
[235.00000000 100.00000000]
[260.00000000 100.00000000]
[285.00000000 100.00000000]
[310.00000000 100.00000000]
[335.00000000 100.00000000]
[360.00000000 100.00000000]
[385.00000000 100.00000000]
[410.00000000 100.00000000]
[435.00000000 100.00000000]
[460.00000000 100.00000000]
[485.00000000 100.00000000]
[510.00000000 100.00000000]
[535.00000000 100.00000000]
[560.00000000 100.00000000]
[585.00000000 100.00000000]
[610.00000000 100.00000000]
[635.00000000 100.00000000]
[660.00000000 100.00000000]
[685.00000000 100.00000000]
[710.00000000 100.00000000]
[735.00000000 100.00000000]
[735.00000000 125.00000000]
[735.00000000 150.00000000]
[735.00000000 175.00000000]
[735.00000000 200.00000000]
[735.00000000 225.00000000]
[735.00000000 250.00000000]
[735.00000000 275.00000000]
[725.90148926 298.28555298]
[740.00000000 318.93093872]
[765.00000000 318.93093872]
[779.09851074 298.28555298]
[770.00000000 275.00000000]
[770.00000000 250.00000000]
[770.00000000 225.00000000]
[770.00000000 200.00000000]
[770.00000000 175.00000000]
[770.00000000 150.00000000]
[770.00000000 125.00000000]
[770.00000000 100.00000000]
[795.00000000 100.00000000]
[820.00000000 100.00000000]
[845.00000000 100.00000000]
[870.00000000 100.00000000]
[895.00000000 100.00000000]
[920.00000000 100.00000000]
[945.00000000 100.00000000]
[970.00000000 100.00000000]
[995.00000000 100.00000000]
[1020.00000000 100.00000000]
[1045.00000000 100.00000000]
[1070.00000000 100.00000000]
[1095.00000000 100.00000000]
[1095.00000000 125.00000000]
[1095.00000000 150.00000000]
[1095.00000000 175.00000000]
[1095.00000000 200.00000000]
[1095.00000000 225.00000000]
[1080.92858887 245.66383362]
[1085.87768555 270.16906738]
[1106.86560059 283.75225830]
[1116.56787109 306.79278564]
[1126.27026367 329.83331299]
[1135.97253418 352.87384033]
[1145.67480469 375.91436768]
[1155.37707520 398.95486450]
[1147.74206543 422.76046753]
[1157.44433594 445.80096436]
[1179.80871582 456.97387695]
[1189.51098633 480.01440430]
[1199.21325684 503.05490112]
[1208.91552734 526.09545898]
[1207.51855469 551.05639648]
[1226.35046387 567.49896240]
[1236.05273438 590.53948975]
[1234.65576172 615.50042725]
[1253.48767090 631.94299316]
[1263.18994141 654.98352051]
[1258.24084473 679.48876953]
[1272.31225586 700.15258789]
[1296.92675781 704.52587891]
[1314.81042480 721.99511719]
[1332.69409180 739.46435547]
[1330.88854980 764.39910889]
[1343.03442383 786.25036621]
[1365.16442871 797.88067627]
[1390.04992676 795.49108887]
[1409.56250000 779.86218262]
[1417.32836914 756.09899902]
[1440.49328613 746.69769287]
[1465.43395996 748.41986084]
[1482.12048340 729.80377197]
[1505.28552246 720.40252686]
[1528.45043945 711.00128174]
[1553.15856934 714.81030273]
[1572.42773438 698.88232422]
[1573.33569336 673.89880371]
[1555.27355957 656.61407471]
[1530.35412598 658.61956787]
[1515.28869629 678.57031250]
[1492.12377930 687.97155762]
[1468.95874023 697.37280273]
[1444.01818848 695.65063477]
[1427.33154297 714.26672363]
[1404.16662598 723.66802979]
[1382.03662109 712.03765869]
[1357.15112305 714.42724609]
[1339.26745605 696.95800781]
[1321.38378906 679.48876953]
[1316.43469238 654.98352051]
[1295.44665527 641.40032959]
[1285.74438477 618.35980225]
[1287.14135742 593.39886475]
[1268.30944824 576.95623779]
[1258.60717773 553.91577148]
[1260.00427246 528.95483398]
[1241.17224121 512.51220703]
[1231.46997070 489.47171021]
[1221.76770020 466.43118286]
[1212.06542969 443.39065552]
[1219.70056152 419.58508301]
[1209.99816895 396.54455566]
[1187.63378906 385.37167358]
[1177.93151855 362.33114624]
[1168.22924805 339.29061890]
[1158.52697754 316.25012207]
[1148.82470703 293.20959473]
[1139.12231445 270.16906738]
[1144.07141113 245.66383362]
[1130.00000000 225.00000000]
[1130.00000000 200.00000000]
[1130.00000000 175.00000000]
[1130.00000000 150.00000000]
[1130.00000000 125.00000000]
[1130.00000000 100.00000000]
[1155.00000000 100.00000000]
[1180.00000000 100.00000000]
[1205.00000000 100.00000000]
[1230.00000000 100.00000000]
[1255.00000000 100.00000000]
[1280.00000000 100.00000000]
[1305.00000000 100.00000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[142.50000000 240.12681945 23.13159456 220.83979705 155.41989853 1.00000000]
[142.50000000 240.12681945 23.13159456 155.41989853 90.00000000 1.00000000]
[142.50000000 240.12681945 23.13159456 90.00000000 24.58010147 1.00000000]
[142.50000000 240.12681945 23.13159456 24.58010147 319.16020295 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[752.50000000 295.25823761 26.77024824 229.17803299 173.50681980 1.00000000]
[752.50000000 295.25823761 26.77024824 173.50681980 117.83560660 1.00000000]
[752.50000000 295.25823761 26.77024824 117.83560660 62.16439340 1.00000000]
[752.50000000 295.25823761 26.77024824 62.16439340 6.49318020 1.00000000]
[752.50000000 295.25823761 26.77024824 6.49318020 310.82196701 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[1112.49999830 252.04002271 32.20889362 237.08950786 191.41790157 1.00000000]
[1112.49999830 252.04002271 32.20889362 191.41790157 145.74629528 1.00000000]
[1112.49999830 252.04002271 32.20889362 145.74629528 100.07468899 1.00000000]
[]
[]
[]
[]
[]
[1183.72125560 421.17277151 36.01426010 218.09152064 177.47330478 1.00000000]
[1183.72125560 421.17277151 36.01426010 177.47330478 136.85508893 1.00000000]
[1183.72125560 421.17277151 36.01426010 136.85508893 96.23687308 1.00000000]
[]
[]
[]
[1233.76137413 540.00559080 28.47466729 209.24268876 157.16419683 1.00000000]
[1233.76137413 540.00559080 28.47466729 157.16419683 105.08570491 1.00000000]
[]
[1260.89855212 604.44963000 28.47466729 209.24268871 157.16419678 1.00000000]
[1260.89855212 604.44963000 28.47466729 157.16419678 105.08570486 1.00000000]
[]
[1289.81229058 673.11255771 32.20889362 214.25370462 168.58209833 1.00000000]
[1289.81229058 673.11255771 32.20889362 168.58209833 122.91049204 1.00000000]
[1289.81229058 673.11255771 32.20889362 122.91049204 77.23888575 1.00000000]
[]
[]
[1373.60052370 754.95917284 43.74267810 200.74602943 167.53721152 1.00000000]
[1373.60052370 754.95917284 43.74267810 167.53721152 134.32839362 1.00000000]
[1373.60052370 754.95917284 43.74267810 134.32839362 101.11957571 1.00000000]
[1373.60052370 754.95917284 43.74267810 101.11957571 67.91075780 1.00000000]
[1373.60052370 754.95917284 43.74267810 67.91075780 34.70193989 1.00000000]
[1373.60052370 754.95917284 43.74267810 34.70193989 1.49312198 1.00000000]
[]
[1454.72603730 722.03525996 28.47466729 119.98924970 67.91075777 1.00000000]
[1454.72603730 722.03525996 28.47466729 67.91075777 15.83226585 1.00000000]
[]
[]
[1545.04811409 685.37902122 30.52836670 122.93447185 74.59323381 1.00000000]
[1545.04811409 685.37902122 30.52836670 74.59323381 26.25199578 1.00000000]
[1545.04811409 685.37902122 30.52836670 26.25199578 337.91075775 1.00000000]
[1545.04811409 685.37902122 30.52836670 337.91075775 289.56951972 1.00000000]
[1545.04811409 685.37902122 30.52836670 289.56951972 241.22828169 1.00000000]
[1545.04811409 685.37902122 30.52836670 241.22828169 192.88704365 1.00000000]
[]
[]
[1454.72603730 722.03525996 28.47466729 299.98924965 247.91075773 1.00000000]
[1454.72603730 722.03525996 28.47466729 247.91075773 195.83226589 1.00000000]
[]
[1373.60052370 754.95917284 43.74267810 314.32839362 281.11957571 1.00000000]
[1373.60052370 754.95917284 43.74267810 281.11957571 247.91075780 1.00000000]
[]
[]
[1289.81229058 673.11255771 32.20889362 11.41790148 325.74629519 1.00000000]
[1289.81229058 673.11255771 32.20889362 325.74629519 280.07468890 1.00000000]
[]
[1260.89855212 604.44963000 28.47466729 29.24268866 337.16419674 1.00000000]
[1260.89855212 604.44963000 28.47466729 337.16419674 285.08570491 1.00000000]
[]
[1233.76137413 540.00559080 28.47466729 29.24268871 337.16419678 1.00000000]
[1233.76137413 540.00559080 28.47466729 337.16419678 285.08570495 1.00000000]
[]
[]
[]
[1183.72125560 421.17277151 36.01426010 38.09152064 357.47330478 1.00000000]
[1183.72125560 421.17277151 36.01426010 357.47330478 316.85508893 1.00000000]
[1183.72125560 421.17277151 36.01426010 316.85508893 276.23687308 1.00000000]
[]
[]
[]
[]
[]
[1112.49999830 252.04002271 32.20889362 34.25370472 348.58209843 1.00000000]
[1112.49999830 252.04002271 32.20889362 348.58209843 302.91049214 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[71 153]
[72 152]
[73 151]
[74 150]
[75 149]
[76 148]
[79 146]
[80 145]
[81 144]
[82 143]
[83 142]
[84 141]
[87 138]
[88 137]
[89 136]
[90 135]
[92 133]
[93 132]
[95 130]
[96 129]
[99 127]
[100 126]
[101 125]
[107 123]
[108 122]
[110 120]
[111 119]
[112 118]
] def

init

% Start Annotations
56 58 12 1.00 0.60 0.67 omark 69 104 12 0.72 0.69 0.47 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
